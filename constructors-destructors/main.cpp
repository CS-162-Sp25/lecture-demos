#include <iostream>

// What is the purpose of a constructor?
// A: To initialize / set up an object. Called automatically when object is declared.

// Rule about constructors:
// A default constructor will automatically be generated by your compiler
// if no constructors have been explicitly declared for that class.
// It does nothing.

// What is the purpose of a destructor?
// A: To "tear down" an object
//
// Destructor is called automatically whenever an object is freed from memory
// Commonly frees the memory associaterd with the object's dynamically allocated
// 	member variables

class pet {
private:
	std::string name;
	int age;
public:
	pet(const std::string& name, int age);
};

pet::pet(const std::string& name, int age) : name(name), age(age) {
	std::cout << "Pet constructor!" << std::endl;
}

// pet_owner.hpp
// Member variables denote a "has-a" relationship
class pet_owner {
private:
	const int num_pets;
	std::string* pet_names;
	pet favorite_pet;
public:
	void print() const;
	// pet_owner(); // Default constructor: Constructor with no parameters
	pet_owner();
	pet_owner(int num_pets); // Nondefault constructor: Constructor with parameters

	~pet_owner(); // Destructor
};

// pet_owner.cpp
void pet_owner::print() const {
	for (int i = 0; i < this->num_pets; i++) {
		std::cout << this->pet_names[i] << std::endl;
	}
}

// Default constructor
pet_owner::pet_owner() : num_pets(0), pet_names(nullptr), favorite_pet("NULL", 0) {
	std::cout << "Default Constructor!" << std::endl;
}

// Nondefault constructor
pet_owner::pet_owner(int num_pets) : num_pets(num_pets), pet_names(new std::string[this->num_pets]), favorite_pet("Jeff", 5) {
	std::cout << "Nondefault constructor!" << std::endl;
}

pet_owner::~pet_owner() {
	delete [] this->pet_names;
}

// main.cpp
int main() {
	pet_owner p; // This line calls the DEFAULT constructor
	// Initialize, or "set up" p, including ALL of its member variables
	
	p.print();

	pet_owner p2(5);

	/*
	pet_owner owners[10];
	int n;
	std::cin >> n;
	pet_owner* owners_heap = new pet_owner[n];
	*/
}
